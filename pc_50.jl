using JuMP, CPLEX, Distributions, LinearAlgebra, MathOptInterface

n = 50
#=
0.02&0.01 mu=[75.7945580000157 23.184635515163666 6.3926222906548595 82.79103776948288 79.36782844627382 0.46162592975341754 83.40360258370113 24.33414296894175 55.732694331962996 15.129697027636569 53.19554947287373 35.488736906051045 73.6466752884579 28.00040069591305 38.46882420133165 64.52684163225187 20.494355386795238 66.96485500957954 94.62219650556318 89.07920859170045 39.1074660643564 14.1458643408645 44.91097963693497 84.18011753900625 91.4176129466247 85.14178653244295 8.338918262660556 30.714476758897536 33.40188106283697 65.6161737170798 92.71174657230347 70.94274644126139 40.69758254987615 90.91498711682978 38.27839176226345 63.41836904430568 46.06607917678288 55.99276988052847 40.60451895389443 51.61909425489573 13.709126023556372 83.85069434366851 67.52866473958645 6.4004750583108505 10.575014525960459 77.56608144812233 28.645331958363464 4.013632935057765 55.12360666868818 12.902263366621991]
a=[41.91947166257457 19.70936261142917 53.45032262372482 91.88949138697053 12.7142891708235 99.2753976530602 84.58588179297153 37.08566056757833 62.10846897372967 85.61697815386839 0.45295762561770037 43.94157729102503 84.99670483790544 57.69495768356791 93.97853677027513 35.434549886388865 35.927604048215855 0.326642102623631 46.343343568436836 80.70957187684007 49.346274746862115 1.7850993453125685 41.7058880571396 87.86563375968805 94.04231479898877 69.40603663269903 30.506919335628535 51.44488154601208 41.221840644005844 78.43083538738377 61.495775052126476 74.24775649181122 91.61238804637334 38.74031944036691 42.26813469776219 54.32693288567595 22.20112013232548 21.30506929310163 52.106084068172144 77.10210984223642 26.50770126800568 35.85889104366103 76.13320087267142 20.445604061720346 92.53972146154592 1.869501012058561 91.19106855163375 90.71104461855197 96.24072910612075 16.80061589180646]
b=1348.8106311895376
sigma=[7.462032338921824, 12.20604461508054, 5.50896336600082, 56.28094758344757, 43.369706451092334, 0.25958557982351177, 33.08281222374546, 10.16845330725121, 13.868528034619583, 2.0779162909135915, 9.533135527537983, 23.613244394786506, 49.736295217131335, 16.163425866379875, 37.03719500290994, 40.18082031615566, 10.796025936248517, 1.0452364455700398, 35.0549224723236, 62.14496797323393, 31.35136232119403, 5.0956673094792855, 42.26760285691494, 79.46446652990804, 51.29102442578779, 31.89246880759666, 7.984812222917947, 11.529970810464032, 28.7276644784904, 22.05047839788288, 42.21602623397414, 23.382265655454578, 7.781662678109864, 47.77617916655661, 22.295791336030007, 55.38775840904024, 31.15457739430846, 16.356204737403914, 25.143251527324175, 47.71719107878785, 0.46921177390559676, 41.072579105931815, 31.902242686593894, 5.481254808788228, 9.841696731040837, 27.778778857870893, 17.239371233638312, 0.8497384367122889, 35.903340610054684, 10.591829476008238]
 =#
#= 
0.03 mu=[9.790255472228948 60.244105237715786 50.12655146372721 56.40139244121064 35.7469052493121 48.84070992074976 29.553018369525898 68.3639189190359 10.84830846421877 6.39015777298696 72.58109867305268 11.167873672859752 61.55410390072365 56.14008863463188 22.045255381016815 63.46968696751398 15.535808762701741 31.878822526776673 51.739415504124295 1.4889939165316668 9.396411281732654 83.85680315797876 44.76982849456942 57.388138125108256 95.85172123170457 0.9970708355003133 81.8518419031613 36.88046773649576 94.57602981608395 86.49093882965451 49.02811162345977 14.716348342252061 87.4680642003402 5.035659591699416 74.56241549031355 77.44450837534613 42.38958807289032 52.03015771408861 3.338628522369247 1.0986663022008902 94.09038547601561 43.13316521455146 52.97871121925629 18.657728067021406 28.12810752095951 25.957028599262742 56.59231208177222 54.48802872247885 69.90009813723164 6.811789274006519]
 a=[7.610835705144137 34.98515534955927 84.21740301259426 29.609484185669153 10.867992152046202 87.82336927053692 93.65365863404801 4.24644824642696 50.61359538833543 9.263940300222039 5.793471977266962 26.488259638484323 6.50535915047854 19.031505375017122 44.38114205722516 8.32679927806842 28.780205802283078 14.506283894787508 75.88401717793988 76.11032229911508 18.470516544687566 35.50141412928141 97.93445416155818 50.46507362240076 87.02179702603104 82.77492931007829 40.79276992360267 97.58656454734351 19.62015738875249 79.6563285611081 59.714131237260496 66.40293678391073 86.9296925597984 23.579270641398086 61.4676716595413 36.35318213254656 10.700713659863014 84.44236343001205 5.861250359267334 38.77454095883258 93.27331117796511 87.34841106572382 84.92360808426204 33.78186923583407 62.6061738353486 28.49373126916579 96.14020968128631 59.92515641548588 15.487082134200636 9.183556771010803]
 b=1186.9560586014031
 sigma=[3.2438528788673437, 26.904819697405795, 34.54287016239429, 47.009743249053045, 3.8339852515763826, 27.945313208102167, 0.6258668448251264, 27.527663248416285, 2.6293725516434856, 4.087087412356649, 14.882304292292469, 1.0777826487669129, 5.704797676231084, 52.19480106946985, 18.354446885653836, 59.91284800399009, 12.311484275705768, 16.125448449721954, 51.41721671748102, 1.1666641550019738, 5.63882056486844, 25.378452170882348, 42.43858831429352, 39.31553230708499, 71.89897902208568, 0.2961183182457203, 22.1493054786419, 24.145892752611108, 27.029046175612095, 16.28722987045229, 40.56650489454405, 8.140870610375668, 21.45692249493775, 3.189033314013124, 4.967019623599349, 66.22843642112446, 29.493890560558906, 37.27260812882774, 3.190404028039553, 0.13304127978959918, 60.056435712342285, 33.588351638650295, 0.8995722490162252, 12.711858464519285, 7.538463407861613, 7.335505005425321, 3.105175274911085, 27.37369253255416, 18.864520959107764, 2.701641024445317]
 =#
#= 0.10 mu=[69.52561633456466 1.813682482876422 24.445937285472997 86.350138847223 24.487830917637854 90.87455532274937 34.4332419815361 88.4029460730608 32.70330278304523 77.97454317168078 78.99985729898495 33.55512435319099 55.616423884390706 79.58029693156014 6.5111225098711145 31.182734260494293 18.2978516115882 5.893416987573397 36.55593056179774 65.29733726730576 10.27952702785726 86.99158828560726 66.57871845466715 95.39625413344494 21.871225351278923 79.15192294438688 40.10532449656121 42.34643586544294 62.67002763675554 67.89555567625277 81.27304847861821 85.16534299260807 77.25176295418588 56.87498281525774 93.33135346784141 11.768660491725969 91.8557460790079 8.041979452467963 71.02388282881535 56.882334134642555 79.06976920698933 62.63909214355541 23.136900972274844 17.97234557762575 83.12073639226122 5.682614551123111 51.22312630582863 71.0492237301564 98.90317874348825 33.460948258786935]
 a=[94.4566668627757 47.50854820225913 38.658822611226576 15.023326060472487 29.650193071149623 42.2536572684718 16.48901347684324 40.030357729943375 12.016869968038236 36.0567704294847 98.29058410128941 31.88518361566368 55.552788020794374 24.68589331736968 12.236723467254972 26.27862416866401 87.21710589030319 11.533116804769172 57.266575387205 65.6052160047915 61.37522317419338 30.206933131335145 81.18354052478543 43.86210323627859 84.7107861240465 3.5809654071033092 6.556313900189348 46.279830388355094 6.530783253888672 59.7426840918886 89.50828367427164 70.43995953073437 65.23630951062742 27.704663181402832 93.36465210869527 71.1355041736666 2.926847728720783 13.138199206174928 25.071847965217174 71.95261420065246 63.98280264346782 13.062962708630243 85.04239066155445 97.96708430525534 99.61566937351954 34.11873191078697 23.7795397480115 40.952065748640386 85.3409404760003 95.57544581410411]
 b=1218.320857180484
 sigma=[31.684084743361794, 0.17063180306678866, 5.15546493990527, 3.0621277180614275, 9.881363125997925, 20.671059528619736, 8.912921071556214, 64.87538771582004, 7.265913172726269, 43.258439408666874, 57.23844565990674, 19.547251712315408, 31.555506016965715, 71.80515322129409, 5.592019630364623, 26.61824051702831, 1.425046976788371, 1.4670643168175845, 17.866869203263334, 60.04477519679836, 1.4895594320024845, 55.21633233712575, 58.037082289690886, 57.29911718092913, 1.1432548576557644, 25.649146023041496, 39.01102781018446, 33.68079566636652, 32.063728829682574, 6.044759007544277, 7.320686334971629, 72.76341477570776, 56.20457479290345, 44.820308272560126, 56.438288790581296, 4.847600884155671, 60.61418763704829, 2.9345367825084954, 63.30354948843333, 23.677361317094686, 6.991607424926192, 42.783825292003144, 9.281070212416584, 13.231212714369676, 80.70588934558744, 3.1346773624707867, 14.492237607434932, 36.565842635060946, 92.56460131040497, 7.528084131018883]
  =#
  mu=[84.51338381789259 45.205174284112914 92.26485715907145 32.74465797257601 16.75474688544356 11.520442912527706 23.23362074929385 75.6188134070882 71.68107113189066 79.51579944450445 70.42097286711281 62.649434015825676 77.06624043344762 10.130060182577783 92.12581460327935 68.13264931348117 53.14882642021519 66.11449978106859 25.65166343366865 42.39824224466442 64.61760969288378 61.46827806852222 98.72795408888916 64.06891894098018 22.813630767948943 1.39584364358607 97.56282967193137 72.6056997377527 99.03044971728393 78.79738132800254 2.7288607754633265 84.17270712472398 34.784764480375564 65.43415488169954 74.85265898038713 40.32336012573667 16.58868923822191 31.927527761383022 53.27025940429605 48.077065517081365 44.46761029871374 15.693299013959317 13.670523696693348 28.473421271126497 22.70632571436152 44.409633621747034 62.63193283782027 63.039753915979844 62.53853685225762 97.418639791966]
  a=[0.39537289338009707 26.548634026220476 42.58178592558814 13.091150129636409 20.612632138349596 89.53239933108492 83.8741539954486 86.0259226319514 75.59401720783998 93.46365756321504 93.12628547609208 39.94904695508572 8.578587337006283 73.88228743760187 76.43319021224889 43.684291767411686 16.176611247297036 79.04193553668543 6.653127014000793 18.018171961234486 7.762185552377964 41.679641538609566 45.828529861405606 55.3216985271123 20.65197181497187 2.1759177342882463 96.65516141574389 19.774605538195278 55.31730674654959 4.593572943873636 84.14220163595294 55.88905406301399 58.506601771299785 10.5199443027707 75.95825694190223 28.54757904393258 86.69187778908037 86.43428318069522 94.7612013894083 86.71795567102585 91.42672184639396 12.885269564430768 53.30448135651209 21.40229706597617 87.9283391294775 3.018416655616385 22.25716587593267 66.74231163878979 7.506294381113088 41.077149773293506]
  b=1206.3706277685624
  sigma=[74.39603034517366, 10.608796747697923, 33.68672257564474, 14.94623208408628, 8.946650556322382, 2.4159435394254207, 14.276093858937738, 31.529659096347437, 42.14336837111905, 15.48094490942591, 45.85094470501999, 16.39222223263364, 69.26015723682485, 8.551371963659413, 57.44841358114405, 23.976801492394365, 39.4603684504282, 32.68616656305389, 1.552615212694529, 40.888717127428016, 40.09431714086745, 29.78953950705919, 73.92580175572435, 9.606335700918764, 0.8261312442748117, 0.3513557142620729, 7.998960807222513, 29.634392760984273, 62.54446675336358, 0.221362102259242, 0.7110089164420759, 47.93025304427959, 2.5614903287649424, 27.28002532511356, 74.64874043369741, 11.42935751116841, 6.958967290930926, 28.729678296171773, 35.45574326423116, 36.22952161871957, 1.5253327056378472, 6.213004133848148, 4.814582830300742, 21.2920908150717, 6.920329210249798, 0.18210453002064186, 25.650419089387988, 21.702170990447232, 11.088114129753306, 55.53205775886579]
#epsilon=0.05
Omega=4.358898943540673

function separate(n::Int , x_val::Vector{Float64})
    function h(x::AbstractArray)
        return sum(mu .* x') - Omega * norm(sigma .* x)
    end
    #compute t = value of objective function at current node
    t = h(x_val)
    #sort entries in x_val, get an array R
    R = sortperm(x_val, rev = true)
    #compute pi
    pi = Vector{Float64}(undef, n)
    x = zeros(n)
    function indicator(R::Vector{Int64}, i::Int, x::Vector{Float64})
        for j in 1:i
            x[R[j]] = 1
        end
        return x
    end
    pi[R[1]] = h(indicator(R , 1 , x))
    for i in 2:n
        pi[R[i]] = h(indicator(R , i , x)) - h(indicator(R , i-1 , x))
    end
    #if pi' * x > t then return pi' * x - t
    #else return
    temp = Vector{Float64}(undef, n+1)
    for i in 1:n
        temp[i] = pi[i]
    end
    temp[n+1] = t
    if pi' * x_val > t
        return temp
    else
        return 
    end
end

model = Model(optimizer_with_attributes(CPLEX.Optimizer, "CPXPARAM_MIP_Strategy_HeuristicEffort" => 0 , "CPXPARAM_MIP_Strategy_Search" => 1, "CPX_PARAM_CUTSFACTOR" => 1 , "CPXPARAM_Preprocessing_Linear" => 0 , "CPXPARAM_MIP_Interval" => 1))
MOI.set(model, MOI.NumberOfThreads(), 1)

@variable(model, x1, Bin)
@variable(model, x2, Bin)
@variable(model, x3, Bin)
@variable(model, x4, Bin)
@variable(model, x5, Bin)
@variable(model, x6, Bin)
@variable(model, x7, Bin)
@variable(model, x8, Bin)
@variable(model, x9, Bin)
@variable(model, x10, Bin)
@variable(model, x11, Bin)
@variable(model, x12, Bin)
@variable(model, x13, Bin)
@variable(model, x14, Bin)
@variable(model, x15, Bin)
@variable(model, x16, Bin)
@variable(model, x17, Bin)
@variable(model, x18, Bin)
@variable(model, x19, Bin)
@variable(model, x20, Bin)
@variable(model, x21, Bin)
@variable(model, x22, Bin)
@variable(model, x23, Bin)
@variable(model, x24, Bin)
@variable(model, x25, Bin)
@variable(model, x26, Bin)
@variable(model, x27, Bin)
@variable(model, x28, Bin)
@variable(model, x29, Bin)
@variable(model, x30, Bin)
@variable(model, x31, Bin)
@variable(model, x32, Bin)
@variable(model, x33, Bin)
@variable(model, x34, Bin)
@variable(model, x35, Bin)
@variable(model, x36, Bin)
@variable(model, x37, Bin)
@variable(model, x38, Bin)
@variable(model, x39, Bin)
@variable(model, x40, Bin)
@variable(model, x41, Bin)
@variable(model, x42, Bin)
@variable(model, x43, Bin)
@variable(model, x44, Bin)
@variable(model, x45, Bin)
@variable(model, x46, Bin)
@variable(model, x47, Bin)
@variable(model, x48, Bin)
@variable(model, x49, Bin)
@variable(model, x50, Bin)

@variable(model, c >= 0)
@objective(model,
           Max, 
           mu[1]*x1 + mu[2]*x2 + mu[3]*x3 + mu[4]*x4 + mu[5]*x5 + mu[6]*x6 + mu[7]*x7 + mu[8]*x8 + mu[9]*x9 + mu[10]*x10 + mu[11]*x11 + mu[12]*x12 + mu[13]*x13 + mu[14]*x14 + mu[15]*x15 + mu[16]*x16 + mu[17]*x17 + mu[18]*x18 + mu[19]*x19 + mu[20]*x20 + mu[21]*x21 + mu[22]*x22 + mu[23]*x23 + mu[24]*x24 + mu[25]*x25 + mu[26]*x26 + mu[27]*x27 + mu[28]*x28 + mu[29]*x29 + mu[30]*x30 + mu[31]*x31 + mu[32]*x32 + mu[33]*x33 + mu[34]*x34 + mu[35]*x35 + mu[36]*x36 + mu[37]*x37 + mu[38]*x38 + mu[39]*x39 + mu[40]*x40 + mu[41]*x41 + mu[42]*x42 + mu[43]*x43 + mu[44]*x44 + mu[45]*x45 + mu[46]*x46 + mu[47]*x47 + mu[48]*x48 + mu[49]*x49 + mu[50]*x50 - Omega * c)
@constraint(model, a[1]*x1 + a[2]*x2 + a[3]*x3 + a[4]*x4 + a[5]*x5 + a[6]*x6 + a[7]*x7 + a[8]*x8 + a[9]*x9 + a[10]*x10 + a[11]*x11 + a[12]*x12 + a[13]*x13 + a[14]*x14 + a[15]*x15 + a[16]*x16 + a[17]*x17 + a[18]*x18 + a[19]*x19 + a[20]*x20 + a[21]*x21 + a[22]*x22 + a[23]*x23 + a[24]*x24 + a[25]*x25 +  + a[26]*x26 + a[27]*x27 + a[28]*x28 + a[29]*x29 + a[30]*x30 + a[31]*x31 + a[32]*x32 + a[33]*x33 + a[34]*x34 + a[35]*x35 + a[36]*x36 + a[37]*x37 + a[38]*x38 + a[39]*x39 + a[40]*x40 + a[41]*x41 + a[42]*x42 + a[43]*x43 + a[44]*x44 + a[45]*x45 + a[46]*x46 + a[47]*x47 + a[48]*x48 + a[49]*x49 + a[50]*x50 <= b)
@constraint(model, c^2 >= sigma[1]^2*x1^2 + sigma[2]^2*x2^2 + sigma[3]^2*x3^2 + sigma[4]^2*x4^2 + sigma[5]^2*x5^2 + sigma[6]^2*x6^2 + sigma[7]^2*x7^2 + sigma[8]^2*x8^2 + sigma[9]^2*x9^2 + sigma[10]^2*x10^2 + sigma[11]^2*x11^2 + sigma[12]^2*x12^2 + sigma[13]^2*x13^2 + sigma[14]^2*x14^2 + sigma[15]^2*x15^2 + sigma[16]^2*x16^2 + sigma[17]^2*x17^2 + sigma[18]^2*x18^2 + sigma[19]^2*x19^2 + sigma[20]^2*x20^2 + sigma[21]^2*x21^2 + sigma[22]^2*x22^2 + sigma[23]^2*x23^2 + sigma[24]^2*x24^2 + sigma[25]^2*x25^2 +  + sigma[26]^2*x26^2 + sigma[27]^2*x27^2 + sigma[28]^2*x28^2 + sigma[29]^2*x29^2 + sigma[30]^2*x30^2 + sigma[31]^2*x31^2 + sigma[32]^2*x32^2 + sigma[33]^2*x33^2 + sigma[34]^2*x34^2 + sigma[35]^2*x35^2 + sigma[36]^2*x36^2 + sigma[37]^2*x37^2 + sigma[38]^2*x38^2 + sigma[39]^2*x39^2 + sigma[40]^2*x40^2 + sigma[41]^2*x41^2 + sigma[42]^2*x42^2 + sigma[43]^2*x43^2 + sigma[44]^2*x44^2 + sigma[45]^2*x45^2 + sigma[46]^2*x46^2 + sigma[47]^2*x47^2 + sigma[48]^2*x48^2 + sigma[49]^2*x49^2 + sigma[50]^2*x50^2)

function myCallBackFunction(cb_data::CPLEX.CallbackContext , context_id::Clong)
    if context_id != CPX_CALLBACKCONTEXT_CANDIDATE
        return
    end
    
    CPLEX.load_callback_variable_primal(cb_data, context_id)

    data_p = Ref{Cint}()
    ret = CPXcallbackgetinfoint(cb_data , CPXCALLBACKINFO_NODECOUNT , data_p)
    if ret != 0
        @warn "error retrieving node_count"
    end
    node_count = data_p[]
    if node_count != 0
        return
    end

    x_val = zeros(Float64 , n)
    x_val[1] = callback_value(cb_data , x1)
    x_val[2] = callback_value(cb_data , x2)
    x_val[3] = callback_value(cb_data , x3)
    x_val[4] = callback_value(cb_data , x4)
    x_val[5] = callback_value(cb_data , x5)
    x_val[6] = callback_value(cb_data , x6)
    x_val[7] = callback_value(cb_data , x7)
    x_val[8] = callback_value(cb_data , x8)
    x_val[9] = callback_value(cb_data , x9)
    x_val[10] = callback_value(cb_data , x10)
    x_val[11] = callback_value(cb_data , x11)
    x_val[12] = callback_value(cb_data , x12)
    x_val[13] = callback_value(cb_data , x13)
    x_val[14] = callback_value(cb_data , x14)
    x_val[15] = callback_value(cb_data , x15)
    x_val[16] = callback_value(cb_data , x16)
    x_val[17] = callback_value(cb_data , x17)
    x_val[18] = callback_value(cb_data , x18)
    x_val[19] = callback_value(cb_data , x19)
    x_val[20] = callback_value(cb_data , x20)
    x_val[21] = callback_value(cb_data , x21)
    x_val[22] = callback_value(cb_data , x22)
    x_val[23] = callback_value(cb_data , x23)
    x_val[24] = callback_value(cb_data , x24)
    x_val[25] = callback_value(cb_data , x25)
    x_val[26] = callback_value(cb_data , x26)
    x_val[27] = callback_value(cb_data , x27)
    x_val[28] = callback_value(cb_data , x28)
    x_val[29] = callback_value(cb_data , x29)
    x_val[30] = callback_value(cb_data , x30)
    x_val[31] = callback_value(cb_data , x31)
    x_val[32] = callback_value(cb_data , x32)
    x_val[33] = callback_value(cb_data , x33)
    x_val[34] = callback_value(cb_data , x34)
    x_val[35] = callback_value(cb_data , x35)
    x_val[36] = callback_value(cb_data , x36)
    x_val[37] = callback_value(cb_data , x37)
    x_val[38] = callback_value(cb_data , x38)
    x_val[39] = callback_value(cb_data , x39)
    x_val[40] = callback_value(cb_data , x40)
    x_val[41] = callback_value(cb_data , x41)
    x_val[42] = callback_value(cb_data , x42)
    x_val[43] = callback_value(cb_data , x43)
    x_val[44] = callback_value(cb_data , x44)
    x_val[45] = callback_value(cb_data , x45)
    x_val[46] = callback_value(cb_data , x46)
    x_val[47] = callback_value(cb_data , x47)
    x_val[48] = callback_value(cb_data , x48)
    x_val[49] = callback_value(cb_data , x49)
    x_val[50] = callback_value(cb_data , x50)

    temp = separate(n, x_val)
    if temp !== nothing
        MOI.submit(model, MOI.UserCut(cb_data), @build_constraint(sum(temp[i] * x[i] for i in 1:n) <= temp[n+1]))
    end
end

MOI.set(model, CPLEX.CallbackFunction(), myCallBackFunction)
optimize!(model)

println(JuMP.objective_value(model))